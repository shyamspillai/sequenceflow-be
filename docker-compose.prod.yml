version: '3.8'

networks:
  workflow-network:
    driver: bridge

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sequence}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - workflow-network
    restart: unless-stopped

  # Redis for job queues
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - workflow-network
    restart: unless-stopped

  # Main API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=${API_PORT:-3000}
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=${POSTGRES_USER:-postgres}
      - PGPASSWORD=${POSTGRES_PASSWORD:-postgres}
      - PGDATABASE=${POSTGRES_DB:-sequence}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_HOST=${API_HOST:-api}
      - API_PORT=${API_PORT:-3000}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
    ports:
      - "${API_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - workflow-network
    restart: unless-stopped

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=${POSTGRES_USER:-postgres}
      - PGPASSWORD=${POSTGRES_PASSWORD:-postgres}
      - PGDATABASE=${POSTGRES_DB:-sequence}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-5}
      - API_HOST=${API_HOST:-api}
      - API_PORT=${API_PORT:-3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: node dist/worker.js
    networks:
      - workflow-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
