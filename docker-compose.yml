version: '3.8'

networks:
  workflow-network:
    driver: bridge

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sequence
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - workflow-network

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # Bind to local port 6380
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - workflow-network

  # Production API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - PGHOST=postgres
      - PGPORT=5432  # Internal container port, not external mapped port
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - PGDATABASE=sequence
      - REDIS_HOST=redis
      - REDIS_PORT=6379  # Internal container port
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      workflow-network:
        aliases:
          - localhost
          - api-server

  # Production Workers (scalable)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PGHOST=postgres
      - PGPORT=5432  # Internal container port, not external mapped port
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - PGDATABASE=sequence
      - REDIS_HOST=redis
      - REDIS_PORT=6379  # Internal container port
      - WORKER_CONCURRENCY=5
      - API_HOST=api
      - API_PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: ["node", "dist/worker.js"]
    networks:
      - workflow-network

  # Optional: Redis monitoring (can be disabled in production)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - workflow-network

volumes:
  postgres_data:
  redis_data: 