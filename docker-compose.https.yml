version: '3.8'

networks:
  workflow-network:
    driver: bridge

services:
  # Your existing services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sequence
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - workflow-network

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - workflow-network

  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: workflow-api-dev
    environment:
      - NODE_ENV=development
      - PORT=3000
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - PGDATABASE=sequence
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CHOKIDAR_USEPOLLING=true
      - CORS_ORIGIN=*
    # Remove external port mapping - only accessible through nginx
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run start:dev
    networks:
      - workflow-network

  worker-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - PGDATABASE=sequence
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_CONCURRENCY=3
      - CHOKIDAR_USEPOLLING=true
      - API_HOST=api-dev
      - API_PORT=3000
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npx ts-node-dev --respawn --transpile-only src/worker.ts
    networks:
      - workflow-network

  # Nginx reverse proxy with self-signed SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api-dev
    networks:
      - workflow-network

  # Monitoring tools
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - workflow-network

  bullmq-board:
    image: deadly0/bull-board
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
    ports:
      - "3001:3000"
    depends_on:
      - redis
    networks:
      - workflow-network

volumes:
  postgres_data:
  redis_data:
